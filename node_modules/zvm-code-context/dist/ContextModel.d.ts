interface ContextModelProps {
    component: any;
    query: (gql: string, variables: Record<string, any>) => Promise<any>;
}
export declare const APP_COMPONENT_ID = "App";
export declare const ContextModel: {
    Provider: import("react").FC<{
        children?: React.ReactNode;
    } & ContextModelProps>;
    useModel: () => {
        component: any;
        discover: (compId: string) => any;
        query: (gql: string, variables: Record<string, any>) => Promise<any>;
        navigate: (path: string, config?: Record<string, any>) => void;
        globalData: any;
        pageData: any;
    };
};
export declare const AppContextProvider: import("react").FC<{
    children?: React.ReactNode;
} & ContextModelProps>;
export declare function useAppContext(): {
    component: any;
    discover: (compId: string) => any;
    query: (gql: string, variables: Record<string, any>) => Promise<any>;
    navigate: (path: string, config?: Record<string, any>) => void;
    globalData: any;
    pageData: any;
};
export {};
